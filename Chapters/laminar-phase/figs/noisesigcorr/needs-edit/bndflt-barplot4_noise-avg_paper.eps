%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.33.0 (http://poppler.freedesktop.org)
%%Creator: \050MATLAB, The Mathworks, Inc. Version 9.0.0.341360 \\(R2016a\\). Operating System: Linux)
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 351 427
%%HiResBoundingBox: 0 0 350.33 426.85
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font XIVUQO+Helvetica
%!FontType1-1.0: XIVUQO+Helvetica
12 dict begin
/FontInfo 10 dict dup begin
/Notice (\(URW\)++,Copyright 2006 by \(URW\)++ Design & Development) readonly def
/Copyright (Copyright \(URW\)++,Copyright 2006 by \(URW\)++ Design & Develo\
pment) readonly def
/FullName (Nimbus Sans Regular) readonly def
/FamilyName (Nimbus Sans) readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition 0 def
/UnderlineThickness 0 def
end readonly def
/FontName /XIVUQO+Helvetica def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox [0 -23 513 709] readonly def
/StrokeWidth 0 def
/UniqueID 5082796 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 53 /five put
readonly def
currentdict end
currentfile eexec
5AA4F71255501637F1A431BAB555283D093E1B588B45B0281559110D21315C62
BD638C6B34BA54AA75227715D9947EBCD51A104CAEA657499E94138F5645BF68
368BB1B1EC8E4776F067FFF2CE9B89FB7E63A7DB304498C1036D399C47A4CB79
BD517EDB02BEB90195FD7DDAF3E839BCE2DB156D9337DBB2305A465B3E0FFB97
1985C79DC71C47E26F9F0F042B2CDEE97B679358059256FB93D662D43C7ECB5B
1A564DFCECB963478373C69F52172F071E0AA6082A3E10D9E1CE2851CFA210EE
7BD5FCB1AAE15E89D1FB339D587D218B89C18A32F47C7451A80CB1FC07CF5EF6
FB39B30D1F8747CF3029BA9CDC574CE92C96CB7F7EB09200A6B1EDB6E92C5D4E
A60D07DF489BED2B34E84D9F993E34182B0ACA4851CDBD352659242F9BAE94A9
CF3902B79F3D036CD8910627BD9899627BA6EA8F2987DB12373189C36BB091BB
E1FDEC7555721801651068DBE178BF0FB10CE961AAE763822D13FD26873F196D
472190BF3BA5B6C1C2D007C4BB97B97A24439060C53D9BE57AC4183892BAA868
89B0D2939122AE72110DDADC9460314E8656D0D2F3AD0CED1E9D63591F45E497
32BDD1B641B6363BA2300CEBF0E30347D786C8786ECEB1718D01CE604B2FC0B1
F4B295B5DBCF2DAAADCA4979210046D662B14F9AB32E7CA459848F29121D7BDC
17595FE9B008836F445753FCD0F08535B3390072CEB017156F74C0DF093C4396
56E9B21D29E9C26844F7D04ECB29D28485B9DBF5148ABFD1EB4D3CB6A7BDB24E
79EBCC57FC9820BFE2885E098DE57151EF691A7C33837CD0CD480BAA2290FB32
86CF6851C88D26AD0FC2EC6AB1249D848B74849028242D376DFB82D03A084275
C4B3CD46125B1DAA4AE1125A28B846317AF96E4838AF03D419805F211E9BFEF7
65C7B5877DED65F6074E82B65EA511E2EC0F3C63C4550AC840B72D79D6FDB09D
94AA8537A07F2772127A8BF6170ABCD75A6B0247ACFB9ADBE3987C5BB409D1C0
10A27B3B2D279BEBA39C1BDCAB5998D99291963C060D4EA9ED865EC9A7DE5228
FF0E2A35161CF7DB35A3DA96A51E89EE10748B03E675A70389103AFC4C9BC5CB
AA98C4469B96CA8706842F3A6FFD57892A1580C6D27BC526FD0F5AA8C10FF248
B9240FEEED1BADFA8CFF87AB4F33F54A3C25004DD81429F1F87B9DED9B1737AA
75B5A3ADEF96A95507C0E7B9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndResource
/F8_0 /XIVUQO+Helvetica 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /grave/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/bullet
  /Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis/dagger/daggerdbl
  /circumflex/perthousand/Scaron/guilsinglleft/OE/bullet/Zcaron/bullet
  /bullet/quoteleft/quoteright/quotedblleft/quotedblright/bullet/endash/emdash
  /tilde/trademark/scaron/guilsinglright/oe/bullet/zcaron/Ydieresis
  /space/exclamdown/cent/sterling/currency/yen/brokenbar/section
  /dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
  /degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
  /cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
  /Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
  /Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
  /Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
  /Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
  /agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
  /egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
  /eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
  /oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 350.33 426.85 re
W
q
q
[0.1 0 0 0.1 0 0] cm
9.9975 w
2 J
1 j
/DeviceGray {} CS
[1] SC
474.387 3444.12 m
3474.39 3444.12 l
S
/DeviceGray {} CS
[0.467] SC
474.387 3444.12 m
474.387 4194.12 l
S
474.387 3479.84 m
384.387 3479.84 l
S
474.387 3836.98 m
384.387 3836.98 l
S
474.387 4194.12 m
384.387 4194.12 l
S
/DeviceGray {} cs
[0.467] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 18.9387 340.859] Tm
0 0 Td
/F8_0 20.0002 Tf
(0)
[11.120111
0] Tj
-18.75 35.7141 Td
(0.5)
[11.120111
0
5.560056
0
11.120111
0] Tj
-18.75 71.4286 Td
(1.0)
[11.120111
0
5.560056
0
11.120111
0] Tj
Q
5.0025 w
0 J
474.387 3479.84 m
3474.39 3479.84 l
S
/DeviceGray {} cs
[0.4509] sc
678.934 3479.84 545.453 192.758 re
f
1360.75 3479.84 545.449 149.207 re
f
2042.57 3479.84 545.453 132.668 re
f
2724.39 3479.84 545.453 150.277 re
f
20.0025 w
/DeviceGray {} CS
[0.1999] SC
951.656 3662.04 m
951.656 3683.15 l
S
1633.48 3618.81 m
1633.48 3639.27 l
S
2315.3 3601.99 m
2315.3 3623.02 l
S
2997.12 3620.33 m
2997.12 3639.9 l
S
9.9975 w
2 J
/DeviceGray {} CS
[1] SC
474.387 2319.12 m
3474.39 2319.12 l
S
/DeviceGray {} CS
[0.467] SC
474.387 2319.12 m
474.387 3069.12 l
S
474.387 2354.84 m
384.387 2354.84 l
S
474.387 2711.98 m
384.387 2711.98 l
S
474.387 3069.12 m
384.387 3069.12 l
S
/DeviceGray {} cs
[0.467] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 18.9387 228.359] Tm
0 0 Td
/F8_0 20.0002 Tf
(0)
[11.120111
0] Tj
-18.75 35.7141 Td
(0.5)
[11.120111
0
5.560056
0
11.120111
0] Tj
-18.75 71.4286 Td
(1.0)
[11.120111
0
5.560056
0
11.120111
0] Tj
Q
5.0025 w
0 J
474.387 2354.84 m
3474.39 2354.84 l
S
/DeviceGray {} cs
[0.4509] sc
678.934 2354.84 m
1224.387 2354.84 l
1224.387 2354.84 l
678.934 2354.84 l
h
f
1360.75 2354.84 545.449 291.719 re
f
2042.57 2352.54 545.453 2.29297 re
f
2724.39 2347.25 545.453 7.58203 re
f
20.0025 w
/DeviceGray {} CS
[0.1999] SC
1633.48 2613.73 m
1633.48 2679.38 l
S
2315.3 2346.9 m
2315.3 2358.18 l
S
2997.12 2345.14 m
2997.12 2349.37 l
S
9.9975 w
2 J
/DeviceGray {} CS
[1] SC
474.387 1194.12 m
3474.39 1194.12 l
S
/DeviceGray {} CS
[0.467] SC
474.387 1194.12 m
474.387 1944.12 l
S
474.387 1229.84 m
384.387 1229.84 l
S
474.387 1586.98 m
384.387 1586.98 l
S
474.387 1944.12 m
384.387 1944.12 l
S
/DeviceGray {} cs
[0.467] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 18.9387 115.859] Tm
0 0 Td
/F8_0 20.0002 Tf
(0)
[11.120111
0] Tj
-18.75 35.7141 Td
(0.5)
[11.120111
0
5.560056
0
11.120111
0] Tj
-18.75 71.4286 Td
(1.0)
[11.120111
0
5.560056
0
11.120111
0] Tj
Q
5.0025 w
0 J
474.387 1229.84 m
3474.39 1229.84 l
S
/DeviceGray {} cs
[0.4509] sc
678.934 1229.84 m
1224.387 1229.84 l
1224.387 1229.84 l
678.934 1229.84 l
h
f
1360.75 1229.84 m
1906.199 1229.84 l
1906.199 1229.84 l
1360.75 1229.84 l
h
f
2042.57 1229.84 545.453 317.395 re
f
2724.39 1229.84 545.453 207.367 re
f
20.0025 w
/DeviceGray {} CS
[0.1999] SC
2315.3 1498.58 m
2315.3 1595.88 l
S
2997.12 1394.2 m
2997.12 1480.21 l
S
9.9975 w
2 J
/DeviceGray {} CS
[1] SC
474.387 69.1211 m
3474.39 69.1211 l
S
/DeviceGray {} CS
[0.467] SC
474.387 69.1211 m
474.387 819.121 l
S
474.387 104.836 m
384.387 104.836 l
S
474.387 461.98 m
384.387 461.98 l
S
474.387 819.121 m
384.387 819.121 l
S
/DeviceGray {} cs
[0.467] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 18.9387 3.35859] Tm
0 0 Td
/F8_0 20.0002 Tf
(0)
[11.120111
0] Tj
-18.75 35.7141 Td
(0.5)
[11.120111
0
5.560056
0
11.120111
0] Tj
-18.75 71.4286 Td
(1.0)
[11.120111
0
5.560056
0
11.120111
0] Tj
Q
5.0025 w
0 J
474.387 104.836 m
3474.39 104.836 l
S
/DeviceGray {} cs
[0.4509] sc
678.934 104.836 m
1224.387 104.836 l
1224.387 104.836 l
678.934 104.836 l
h
f
1360.75 104.836 m
1906.199 104.836 l
1906.199 104.836 l
1360.75 104.836 l
h
f
2042.57 104.836 m
2588.023 104.836 l
2588.023 104.836 l
2042.57 104.836 l
h
f
2724.39 104.836 545.453 306.809 re
f
20.0025 w
/DeviceGray {} CS
[0.1999] SC
2997.12 360.16 m
2997.12 463.141 l
S
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font XIVUQO+Helvetica
%%EOF
